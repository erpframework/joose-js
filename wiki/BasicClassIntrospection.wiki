#summary Basic Class Introspection and Extention

= Introduction =

Joose allows easy probing, introspection and extention of classes and their objects.

All Joose objects have a property called meta that can be used to access the object's meta object. Classes and their instances share the same meta object and thus have the same meta interface.

----

= Probing =


== Method: can(methodName) ==

Returns true if there is an instance method called _methodName_

{{{
// Query whether a instances of MyClass could execute a method called methodName
MyClass.meta.can(methodName)
// Query whether an instance could execute a method called methodName
myObject.meta.can(methodName)
}}}

== Method: classCan(methodName) ==

Returns true if there is a class method called _methodName_

{{{
// Query whether MyClass could execute a method called methodName
MyClass.meta.classCan(methodName)
}}}

== Method: isa(classObject) ==

Returns true if the object or class is of the same class or a sub class of _classObject_.

{{{
// Query whether MyClass is a subclass of SuperClass
MyClass.meta.isa(SuperClass)
// Query whether the class of myObject is a subclass of SuperClass
myObject.meta.isa(SuperClass)
}}}

== Method: does(role) ==

Returns true if the object or class implements the _role_.

{{{
// Query whether MyClass implements the role MyRole
MyClass.meta.does(MyRole)
// Query whether myObject implements the role MyRole
myObject.meta.does(MyRole)
}}}

----

= Instance Creation =

== Method: instantiate(optionalParameters) ==

This is an alternative way to create new instances of a class. The _optionalParameters_ will be passed to the initializer of the class.

{{{
var object1 = MyClass.meta.instantiate()
var object2 = object1.meta.instantiate()
}}}


----


= Introspection =

== Method: getMethodObject(methodName) ==

This will return the method of name _methodName_ if it exist. The returned method object will be of the type [Joose.Method]

== Method: getClassObject() ==

Returns the class object that is represented by the meta object.

----

= Class Extention =

== Method: addMethod(name, function, properties) ==

This method will add a method of name _name_ with the function body _function_ to the class and all instances. The _properties_ will be passed to the method metaclass (currently none are supported.

Existing methods will be replaced.

== Method: addAttribute(name, properties) ==

This will add an attribute of name _name_ to the class and all instances. The _properties_ are the same which are passed to the has-keyword during [BuildingAClass class-building].

Existing attributes will be replaced, but their values will stay intact. 

== Method: addSuperClass(classObject) ==

Make _classObject_ a super class of the class and all instances. This will not override any existing methods or attributes.

== Method: addSuperClass()