#summary Building a Class

= Synopsis =
{{{
// Create a class called Point
Class("Point", {
    has: {
        x: {
            is:   "rw",
            init: 0
           },
        y: {
            is:   "rw",
            init: 0
        }
    },
    methods: {
        clear: function () {
            this.setX(0);
            this.setY(0);
        }
    }
})

// Use the class
var point = new Point();
point.setX(10)
point.setY(20);
point.clear();
}}}

= Class(name, properties) =

The global function *Class(name, properties)* creates a class with the given name. The class is initialized using the properties:
 * isa: Inherits from a super class
 * does: Applies roles to the class
 * has: Creates attributes
 * methods: Creates instance methods
 * classMethods: Creates class methods

== Class Initialization Properties ==

=== isa ===

Using the isa-keyword you can inherit from other classes:
{{{
Class("Car", {
    isa: Vehicle
})
}}}

=== does ===

Using the does-keyword you can apply roles (which are sometimes also called traits and which do something similar to mixins) to the class:
{{{
Class("Integer", {
    does: Comparable
})
}}}
You may apply multiple roles to the class by passing an array of roles.

See also: [BuildingARole Building a Role]

== Object Initialization ==

Joose will automatically add an initialize method for your class, that allows initialization of new instance like this:
{{{ var point = new Point({ x: 10, y: 10 }) }}}