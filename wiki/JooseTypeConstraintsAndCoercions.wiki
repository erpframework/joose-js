#summary Overview of Joose TypeConstraints and TypeCoercions
#labels Types,TypeConstraints,TypeCoercions,Coercions

= Introduction =

Joose now includeds support for TypeConstraints and Coercions in a Joose Class.
With Joose TypeConstraints and TypeCoercions you can
enforce types in your Joose Attributes.

= Details =

A simple Joose.TypeConstraint with coercions is defined like so:

{{{

Type('MySmallNumber', {
    uses: TYPE.Int, // this is a specilization of the TYPE.Int Class
    where: function (value) {
        if ( value > 1 && value < 5 ) { // we only accept Ints between 1 and 5
            return true;
        }
        return false;
    },
    coerce: [{ //optional coercion definition list
                from: TYPE.Str, //coercion from string to number
                via: function(str) {
                    return new Number(Str); //perform our coercion
                }
            }]
            
});

}}}

You can then use the TypeConstraint in a class like this:

{{{

Class('MyClass', {
    has: {
        attr1: {
            is: 'rw',                // TypeConstraints only work for rw attributes
            isa: Joose.Type.MySmallNumber, // use the  MySmallNumber constraint
            coerce: true             // turn on coercions for this attribute
        }
    }
})

}}}

The MyClass will enforce your constraint in the setter method for attr1 and will
coerce strings into MySmallNumbers for you.

== Type Properties ==

You can define a type with a property like so

{{{

Type('MyPropertyType', {
    uses: [Joose.Type.NotNull],
    message: function(i) {
        return "item: "+i+" is not: "+this.getProps.someProp;
    },
    where: function(i) {
       if (this.getProps().someProp == i)
           return true;
       return false;
    },
    someProp: 'foo'
});

}}}

Now types that use MyPropertyType in their uses can set their own someProp attribute and change the constraint but inherit the message and constraint checking code. See Joose.Type.Enum and the accompanying tests in tests/19_types.t.js for examples of this.

== Default Joose Built-in types ==

Joose comes with a set of default types that you can use as is or build you own types off of them.

The Type hierarchy can be found in the Following Doc: JooseBuiltInTypes