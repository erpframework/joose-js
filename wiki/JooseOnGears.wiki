#summary How Joose and Google Gears can work together

= Introduction =

Joose supports several ways to with [http://gears.google.com/ Google Gears] out of the box. Whenever possible the APIs are implemented in a way that they automatically fall back to alternatives when a user does not have Gears installed. In particular the following APIs are directly supported:

 * [http://code.google.com/apis/gears/api_database.html Database]
 * [http://code.google.com/apis/gears/api_workerpool.html WorkerPool]
 * [http://code.google.com/apis/gears/api_httprequest.html HttpRequest]

= Database =

The Joose distribution includes an object-relational mapper that enables transparent access to the Google Gears database and the HTML5 database (which is currently primarily supported by the Safari browser). You'll find it the examples directory under examples/simple_orm/async and you can try it out with this [http://joose-js.googlecode.com/svn/trunk/examples/simple_orm_sticky_notes.html demo application].
Declaring a database entity class looks like this:
{{{          Class("Person", {
              isa:  ORM.Entity,

              tableName: "person",

              hasOne: {
                  mother: {
                      isa: function () { return m.Person }
                  }
              },

              hasMany: {
                  cars: {
                      isa:        function () { return m.Car },
                      foreignKey: "owner"
                  }
              }
          });
}}}
The OR-Mapper is currently under heavy-development. For more info, check out this [http://joose-js.blogspot.com/search/label/OR-Mapper series of blog posts].