#summary How Joose and Google Gears can work together

= Introduction =

Joose supports several ways to with [http://gears.google.com/ Google Gears] out of the box. Whenever possible the APIs are implemented in a way that they automatically fall back to alternatives when a user does not have Gears installed. In particular the following APIs are directly supported:

 * [http://code.google.com/apis/gears/api_database.html Database]
 * [http://code.google.com/apis/gears/api_workerpool.html WorkerPool]
 * [http://code.google.com/apis/gears/api_httprequest.html HttpRequest]

= Database =

The Joose distribution includes an object-relational mapper that enables transparent access to the Google Gears database and the HTML5 database (which is currently primarily supported by the Safari browser). You'll find it the examples directory under [http://code.google.com/p/joose-js/source/browse/trunk/examples/simple_orm/async/ examples/simple_orm/async] and you can try it out with this [http://joose-js.googlecode.com/svn/trunk/examples/simple_orm_sticky_notes.html demo application].
Declaring a database entity class looks like this:
{{{
          Class("Person", {
              isa:  ORM.Entity,

              tableName: "person",

              hasOne: {
                  mother: {
                      isa: function () { return m.Person }
                  }
              },

              hasMany: {
                  cars: {
                      isa:        function () { return m.Car },
                      foreignKey: "owner"
                  }
              }
          });
}}}
The OR-Mapper is currently under heavy-development. For more info, check out this [http://joose-js.blogspot.com/search/label/OR-Mapper series of blog posts].

== Links ==

 * [http://joose-js.googlecode.com/svn/trunk/examples/simple_orm_sticky_notes.html Demo application]
 * [http://joose-js.googlecode.com/svn/trunk/examples/simple_orm_async.html Unit test suite]
 * [http://ajaxian.com/archives/joose-expands-with-new-orm Post on Ajaxian]

= WorkerPool =

You can automatically execute methods of a Joose.Class in a different thread using Google Gears. All you need to do is use the meta class Joose.Gears and add a worker method. All the Gears-Interfacing is handled for you. If Gears is not present, the worker is executed in the main thread. The workers result will be sent to a method called "on"+uppercaseFirst($worker_name) if available:

{{{
    Class("HardWork", {
        meta: Joose.Gears,
        has: {
            data: {is: rw, init: {}}
        },
        methods: {
            onDoWork: function (result) {
                ok(result == 1001, "Gear Worker returns correct result")
            }
        },
        workers: {
            doWork: function (start) {
                var counter = start;
                for(var i = 0; i < 1000; i++) {
                    counter++
                }
                return counter
            }
        }
    })

    var hw = new HardWork();

    hw.doWork(1)
}}}

== Links ==

 * [http://gearsblog.blogspot.com/2008/03/joosegears-adding-support-for-workers.html Post from Google Gears blog about Joose.Gears]

= HttpRequest =

Joose includes a simple helper method to do AJAX-requests that automatically use the Google Gears HTTP-Request-API if available which can greatly enhance the performance of pages which make heavy use of AJAX.

Just call {{{ Joose.Gears.ajaxRequest(method, url, data, callback) }}}