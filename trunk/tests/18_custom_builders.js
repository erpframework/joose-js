plan(14);

Class("TestMeta", {
    isa: Joose.Class,
    
    methods: {
        handlePropcustomProp: function (paras, props) {
            var me = this;
            ok(paras, "received paras")
            ok(props, "received class properties")
            ok(paras.event1, "Received contents of paras")
            ok(props.has.one, "Received correct class props")
            Joose.O.each(paras, function (func,name) {
                me.addMethod("custom"+name, func)
            })
        }
    }
})


Class("TestClass", {
    meta: TestMeta,
    has: {
        one: {
            is: "rw"
        },
        two: {
            is: "rw"
        }
    },
    
    methods: {
        test: function() {
            return true
        }
    },
    
    customProp: {
        event1: function () {
            return 1
        },
        event2: function () {
            return 2
        }
    }
})

ok(TestMeta, "TestMeta class is here")
ok(TestClass, "TestClass is here")
ok(TestClass.meta.meta.isa(TestMeta), "TestClass' meta class is of the correct type")
ok(TestClass.meta.can("test"), "Regular method is here")
ok(!TestClass.meta.can("event1"), "No method event1")
ok(TestClass.meta.can("customevent1"), "Method event1 generated by customProp that is called as method on the meta class arrived")
ok(TestClass.meta.can("customevent2"), "Method event2 generated by customProp that is called as method on the meta class arrived")

var o = new TestClass();

ok(o.test(), "Regular method call succeeds")
ok(o.customevent1() == 1, "Method customevent1 from custom builder works")
ok(o.customevent2() == 2, "Method customevent2 from custom builder works")

endTests()

